/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateTweet
 * @category generated
 */
export type UpdateTweetInstructionArgs = {
  topic: string
  content: string
}
/**
 * @category Instructions
 * @category UpdateTweet
 * @category generated
 */
export const updateTweetStruct = new beet.FixableBeetArgsStruct<
  UpdateTweetInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['topic', beet.utf8String],
    ['content', beet.utf8String],
  ],
  'UpdateTweetInstructionArgs'
)
/**
 * Accounts required by the _updateTweet_ instruction
 *
 * @property [_writable_] tweet
 * @property [**signer**] author
 * @category Instructions
 * @category UpdateTweet
 * @category generated
 */
export type UpdateTweetInstructionAccounts = {
  tweet: web3.PublicKey
  author: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateTweetInstructionDiscriminator = [
  244, 144, 101, 90, 185, 30, 89, 242,
]

/**
 * Creates a _UpdateTweet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateTweet
 * @category generated
 */
export function createUpdateTweetInstruction(
  accounts: UpdateTweetInstructionAccounts,
  args: UpdateTweetInstructionArgs,
  programId = new web3.PublicKey('BNDCEb5uXCuWDxJW9BGmbfvR1JBMAKckfhYrEKW2Bv1W')
) {
  const [data] = updateTweetStruct.serialize({
    instructionDiscriminator: updateTweetInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tweet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.author,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
